#!/usr/bin/env python
# coding=utf-8

import datetime
from urllib import urlencode
import json
import time

import requests
import pandas as pd

from base64 import b64decode
from base64 import b64encode
from Crypto.Cipher import AES


from utils import replace_expiry_month
from common import dates, getExpiryByShift, getHolidays
import mysql.connector
import common
import black
import numpy as np
import re

counterparty_id = 4

class AESCipher(object):
    '''
    AES EBC pkcs7
    '''
    def __init__(self):
        self._BLOCK_SIZE = 16  # bytes

    def pad(self, s): # pkcs7
        return s + (self._BLOCK_SIZE - len(s) % self._BLOCK_SIZE) * chr(self._BLOCK_SIZE - len(s) % self._BLOCK_SIZE)

    def unpad(self, s):
        return s[:-ord(s[len(s) - 1:])]

    def encrypt(self, raw, key):
        raw = self.pad(raw)
        cipher = AES.new(key, AES.MODE_ECB)
        return b64encode(cipher.encrypt(raw))

    def decrypt(self, enc, key):
        enc = b64decode(enc)
        cipher = AES.new(key, AES.MODE_ECB)
        return self.unpad(cipher.decrypt(enc)).decode('utf8')


aes = AESCipher()
encrypt_key = 'DuFYNnsaM+Qm5zhR'
decrypt_key = 'xaXP7ok78MXOjpXr'

symbols = []

def fetch_symbols():
    global symbols
    if symbols:
        return True, symbols

    start_day = datetime.date.today().strftime("%Y-%m-%d")
    #_, _, start_day = dates(datetime.date.today())
    #print start_day

    encrypt_date =  aes.encrypt(start_day, encrypt_key)
    #print encrypt_date
    encrypt_date = urlencode({'queryDate': encrypt_date})
    #print encrypt_date
    url = 'http://fxgl.gtjaqh.com:12075/quotation/queryOptionQuotation?' + encrypt_date
    #print url
    r = requests.post(url)
    if not r.ok:
        return False, None

    datas = json.loads(aes.decrypt(r.json()['msgContent'], decrypt_key))
    for item in datas:
        symbol = item['underlyingCode']
        symbols.append(symbol)

    return True, symbols


def on_error(request, exception):
    print "request failed [request] %s [error] %s" % (request, exception)


def fetch_quote(symbols = []):
    assert type(symbols) is list

    expiry_dates = []
    notes = []
    opt_prices = []
    call_asks = []
    call_bids = []
    put_asks = []
    put_bids = []
    ss = []
    exchanges = []

    begin_date = getExpiryByShift(datetime.date.today(), 9, 'T', getHolidays()).strftime("%Y-%m-%d")
    #print 'begin_date', begin_date

    for expiry_date, note in zip(dates(datetime.date.today()), '5T 10T 30C'.split()):
        symbol = exchange = opt_price = call_bid0 = call_ask0 = put_bid0 = put_ask0 = None

        if expiry_date > begin_date :
            #print expiry_date, note
            encrypt_date = aes.encrypt(expiry_date, encrypt_key)
            # print encrypt_date
            encrypt_date = urlencode({'valueDate': encrypt_date})
            # print encrypt_date
            #url = 'http://fxgl.gtjaqh.com:12075/quotation/queryOptionQuotation?' + encrypt_date
            url = 'http://fxgl.gtjaqh.com:12075/quotation/atMoneyOptionQuotes?' + encrypt_date
            #print url

            r = requests.post(url)

            if r.ok:
                msg = r.json()['msgContent']
                data = json.loads(aes.decrypt(msg, decrypt_key))

                for item in data:
                    opt_price = float(item['spotPrice'])
                    call_bid0 = float(item['buyOptionPrice'])
                    call_ask0 = float(item['sellOptionPrice'])
                    put_bid0 = float(item['buyOptionPrice'])
                    put_ask0 = float(item['sellOptionPrice'])
                    exchange = item['marketCode']
                    symbol = item['underlyingCode']

                    opt_prices.append(opt_price)
                    call_asks.append(call_ask0)
                    call_bids.append(call_bid0)
                    put_asks.append(put_ask0)
                    put_bids.append(put_bid0)
                    exchanges.append(exchange)
                    ss.append(replace_expiry_month(symbol))

                    expiry_dates.append(expiry_date)

                    notes.append(note)


    return pd.DataFrame({
        'exchange': exchanges,
        'symbol': ss,
        'time': [datetime.datetime.now()] * len(ss),
        'expiry_date': expiry_dates,
        'note': notes,
        'opt_price': opt_prices,
        'call_ask': call_asks,
        'call_bid': call_bids,
        'put_ask': put_asks,
        'put_bid': put_bids,
        'rate': [1] * len(ss)
    })


if __name__ == "__main__":
    # aes = AESCipher()
    #
    # encrypt_key = 'DuFYNnsaM+Qm5zhR'
    # decrypt_key = 'xaXP7ok78MXOjpXr'
    # print aes.encrypt('RB1905', encrypt_key)
    # print aes.encrypt('2019-01-18', encrypt_key) 
    #
    # msgContent = ""
    # print aes.decrypt(msgContent, decrypt_key)

    #print fetch_quote(['sr1905'])
    # msg0 = "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"
    # print aes.decrypt(msg0, decrypt_key)

    # msg1 = ""
    # print aes.decrypt(msg1, decrypt_key)
    pass
    #update_vol_info(4)

